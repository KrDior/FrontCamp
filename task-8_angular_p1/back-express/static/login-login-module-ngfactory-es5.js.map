{"version":3,"sources":["node_modules/@angular/elements/fesm2015/elements.js","src/app/login/login-routing.module.ts","src/app/login/login.component.html","src/app/login/login.component.ts","src/app/login/login.module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license Angular v8.2.14\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { ComponentFactoryResolver, Injector, ApplicationRef, SimpleChange, Version } from '@angular/core';\nimport { merge } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nconst ɵ0 = /**\n * @return {?}\n */\n() => {\n    /** @type {?} */\n    const elProto = (/** @type {?} */ (Element.prototype));\n    return elProto.matches || elProto.matchesSelector || elProto.mozMatchesSelector ||\n        elProto.msMatchesSelector || elProto.oMatchesSelector || elProto.webkitMatchesSelector;\n};\n/** @type {?} */\nconst matches = ((ɵ0))();\n/**\n * Provide methods for scheduling the execution of a callback.\n * @type {?}\n */\nconst scheduler = {\n    /**\n     * Schedule a callback to be called after some delay.\n     *\n     * Returns a function that when executed will cancel the scheduled function.\n     * @param {?} taskFn\n     * @param {?} delay\n     * @return {?}\n     */\n    schedule(taskFn, delay) { /** @type {?} */\n    const id = setTimeout(taskFn, delay); return (/**\n     * @return {?}\n     */\n    () => clearTimeout(id)); },\n    /**\n     * Schedule a callback to be called before the next render.\n     * (If `window.requestAnimationFrame()` is not available, use `scheduler.schedule()` instead.)\n     *\n     * Returns a function that when executed will cancel the scheduled function.\n     * @param {?} taskFn\n     * @return {?}\n     */\n    scheduleBeforeRender(taskFn) {\n        // TODO(gkalpak): Implement a better way of accessing `requestAnimationFrame()`\n        //                (e.g. accounting for vendor prefix, SSR-compatibility, etc).\n        if (typeof window === 'undefined') {\n            // For SSR just schedule immediately.\n            return scheduler.schedule(taskFn, 0);\n        }\n        if (typeof window.requestAnimationFrame === 'undefined') {\n            /** @type {?} */\n            const frameMs = 16;\n            return scheduler.schedule(taskFn, frameMs);\n        }\n        /** @type {?} */\n        const id = window.requestAnimationFrame(taskFn);\n        return (/**\n         * @return {?}\n         */\n        () => window.cancelAnimationFrame(id));\n    },\n};\n/**\n * Convert a camelCased string to kebab-cased.\n * @param {?} input\n * @return {?}\n */\nfunction camelToDashCase(input) {\n    return input.replace(/[A-Z]/g, (/**\n     * @param {?} char\n     * @return {?}\n     */\n    char => `-${char.toLowerCase()}`));\n}\n/**\n * Create a `CustomEvent` (even on browsers where `CustomEvent` is not a constructor).\n * @param {?} doc\n * @param {?} name\n * @param {?} detail\n * @return {?}\n */\nfunction createCustomEvent(doc, name, detail) {\n    /** @type {?} */\n    const bubbles = false;\n    /** @type {?} */\n    const cancelable = false;\n    // On IE9-11, `CustomEvent` is not a constructor.\n    if (typeof CustomEvent !== 'function') {\n        /** @type {?} */\n        const event = doc.createEvent('CustomEvent');\n        event.initCustomEvent(name, bubbles, cancelable, detail);\n        return event;\n    }\n    return new CustomEvent(name, { bubbles, cancelable, detail });\n}\n/**\n * Check whether the input is an `Element`.\n * @param {?} node\n * @return {?}\n */\nfunction isElement(node) {\n    return !!node && node.nodeType === Node.ELEMENT_NODE;\n}\n/**\n * Check whether the input is a function.\n * @param {?} value\n * @return {?}\n */\nfunction isFunction(value) {\n    return typeof value === 'function';\n}\n/**\n * Convert a kebab-cased string to camelCased.\n * @param {?} input\n * @return {?}\n */\nfunction kebabToCamelCase(input) {\n    return input.replace(/-([a-z\\d])/g, (/**\n     * @param {?} _\n     * @param {?} char\n     * @return {?}\n     */\n    (_, char) => char.toUpperCase()));\n}\n/**\n * Check whether an `Element` matches a CSS selector.\n * @param {?} element\n * @param {?} selector\n * @return {?}\n */\nfunction matchesSelector(element, selector) {\n    return matches.call(element, selector);\n}\n/**\n * Test two values for strict equality, accounting for the fact that `NaN !== NaN`.\n * @param {?} value1\n * @param {?} value2\n * @return {?}\n */\nfunction strictEquals(value1, value2) {\n    return value1 === value2 || (value1 !== value1 && value2 !== value2);\n}\n/**\n * Gets a map of default set of attributes to observe and the properties they affect.\n * @param {?} inputs\n * @return {?}\n */\nfunction getDefaultAttributeToPropertyInputs(inputs) {\n    /** @type {?} */\n    const attributeToPropertyInputs = {};\n    inputs.forEach((/**\n     * @param {?} __0\n     * @return {?}\n     */\n    ({ propName, templateName }) => {\n        attributeToPropertyInputs[camelToDashCase(templateName)] = propName;\n    }));\n    return attributeToPropertyInputs;\n}\n/**\n * Gets a component's set of inputs. Uses the injector to get the component factory where the inputs\n * are defined.\n * @param {?} component\n * @param {?} injector\n * @return {?}\n */\nfunction getComponentInputs(component, injector) {\n    /** @type {?} */\n    const componentFactoryResolver = injector.get(ComponentFactoryResolver);\n    /** @type {?} */\n    const componentFactory = componentFactoryResolver.resolveComponentFactory(component);\n    return componentFactory.inputs;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} host\n * @param {?} ngContentSelectors\n * @return {?}\n */\nfunction extractProjectableNodes(host, ngContentSelectors) {\n    /** @type {?} */\n    const nodes = host.childNodes;\n    /** @type {?} */\n    const projectableNodes = ngContentSelectors.map((/**\n     * @return {?}\n     */\n    () => []));\n    /** @type {?} */\n    let wildcardIndex = -1;\n    ngContentSelectors.some((/**\n     * @param {?} selector\n     * @param {?} i\n     * @return {?}\n     */\n    (selector, i) => {\n        if (selector === '*') {\n            wildcardIndex = i;\n            return true;\n        }\n        return false;\n    }));\n    for (let i = 0, ii = nodes.length; i < ii; ++i) {\n        /** @type {?} */\n        const node = nodes[i];\n        /** @type {?} */\n        const ngContentIndex = findMatchingIndex(node, ngContentSelectors, wildcardIndex);\n        if (ngContentIndex !== -1) {\n            projectableNodes[ngContentIndex].push(node);\n        }\n    }\n    return projectableNodes;\n}\n/**\n * @param {?} node\n * @param {?} selectors\n * @param {?} defaultIndex\n * @return {?}\n */\nfunction findMatchingIndex(node, selectors, defaultIndex) {\n    /** @type {?} */\n    let matchingIndex = defaultIndex;\n    if (isElement(node)) {\n        selectors.some((/**\n         * @param {?} selector\n         * @param {?} i\n         * @return {?}\n         */\n        (selector, i) => {\n            if ((selector !== '*') && matchesSelector(node, selector)) {\n                matchingIndex = i;\n                return true;\n            }\n            return false;\n        }));\n    }\n    return matchingIndex;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Time in milliseconds to wait before destroying the component ref when disconnected.\n * @type {?}\n */\nconst DESTROY_DELAY = 10;\n/**\n * Factory that creates new ComponentNgElementStrategy instance. Gets the component factory with the\n * constructor's injector's factory resolver and passes that factory to each strategy.\n *\n * \\@publicApi\n */\nclass ComponentNgElementStrategyFactory {\n    /**\n     * @param {?} component\n     * @param {?} injector\n     */\n    constructor(component, injector) {\n        this.component = component;\n        this.injector = injector;\n        this.componentFactory =\n            injector.get(ComponentFactoryResolver).resolveComponentFactory(component);\n    }\n    /**\n     * @param {?} injector\n     * @return {?}\n     */\n    create(injector) {\n        return new ComponentNgElementStrategy(this.componentFactory, injector);\n    }\n}\nif (false) {\n    /** @type {?} */\n    ComponentNgElementStrategyFactory.prototype.componentFactory;\n    /**\n     * @type {?}\n     * @private\n     */\n    ComponentNgElementStrategyFactory.prototype.component;\n    /**\n     * @type {?}\n     * @private\n     */\n    ComponentNgElementStrategyFactory.prototype.injector;\n}\n/**\n * Creates and destroys a component ref using a component factory and handles change detection\n * in response to input changes.\n *\n * \\@publicApi\n */\nclass ComponentNgElementStrategy {\n    /**\n     * @param {?} componentFactory\n     * @param {?} injector\n     */\n    constructor(componentFactory, injector) {\n        this.componentFactory = componentFactory;\n        this.injector = injector;\n        /**\n         * Changes that have been made to the component ref since the last time onChanges was called.\n         */\n        this.inputChanges = null;\n        /**\n         * Whether the created component implements the onChanges function.\n         */\n        this.implementsOnChanges = false;\n        /**\n         * Whether a change detection has been scheduled to run on the component.\n         */\n        this.scheduledChangeDetectionFn = null;\n        /**\n         * Callback function that when called will cancel a scheduled destruction on the component.\n         */\n        this.scheduledDestroyFn = null;\n        /**\n         * Initial input values that were set before the component was created.\n         */\n        this.initialInputValues = new Map();\n        /**\n         * Set of inputs that were not initially set when the component was created.\n         */\n        this.uninitializedInputs = new Set();\n    }\n    /**\n     * Initializes a new component if one has not yet been created and cancels any scheduled\n     * destruction.\n     * @param {?} element\n     * @return {?}\n     */\n    connect(element) {\n        // If the element is marked to be destroyed, cancel the task since the component was reconnected\n        if (this.scheduledDestroyFn !== null) {\n            this.scheduledDestroyFn();\n            this.scheduledDestroyFn = null;\n            return;\n        }\n        if (!this.componentRef) {\n            this.initializeComponent(element);\n        }\n    }\n    /**\n     * Schedules the component to be destroyed after some small delay in case the element is just\n     * being moved across the DOM.\n     * @return {?}\n     */\n    disconnect() {\n        // Return if there is no componentRef or the component is already scheduled for destruction\n        if (!this.componentRef || this.scheduledDestroyFn !== null) {\n            return;\n        }\n        // Schedule the component to be destroyed after a small timeout in case it is being\n        // moved elsewhere in the DOM\n        this.scheduledDestroyFn = scheduler.schedule((/**\n         * @return {?}\n         */\n        () => {\n            if (this.componentRef) {\n                (/** @type {?} */ (this.componentRef)).destroy();\n                this.componentRef = null;\n            }\n        }), DESTROY_DELAY);\n    }\n    /**\n     * Returns the component property value. If the component has not yet been created, the value is\n     * retrieved from the cached initialization values.\n     * @param {?} property\n     * @return {?}\n     */\n    getInputValue(property) {\n        if (!this.componentRef) {\n            return this.initialInputValues.get(property);\n        }\n        return ((/** @type {?} */ (this.componentRef.instance)))[property];\n    }\n    /**\n     * Sets the input value for the property. If the component has not yet been created, the value is\n     * cached and set when the component is created.\n     * @param {?} property\n     * @param {?} value\n     * @return {?}\n     */\n    setInputValue(property, value) {\n        if (!this.componentRef) {\n            this.initialInputValues.set(property, value);\n            return;\n        }\n        if (strictEquals(value, this.getInputValue(property))) {\n            return;\n        }\n        this.recordInputChange(property, value);\n        ((/** @type {?} */ (this.componentRef.instance)))[property] = value;\n        this.scheduleDetectChanges();\n    }\n    /**\n     * Creates a new component through the component factory with the provided element host and\n     * sets up its initial inputs, listens for outputs changes, and runs an initial change detection.\n     * @protected\n     * @param {?} element\n     * @return {?}\n     */\n    initializeComponent(element) {\n        /** @type {?} */\n        const childInjector = Injector.create({ providers: [], parent: this.injector });\n        /** @type {?} */\n        const projectableNodes = extractProjectableNodes(element, this.componentFactory.ngContentSelectors);\n        this.componentRef = this.componentFactory.create(childInjector, projectableNodes, element);\n        this.implementsOnChanges =\n            isFunction(((/** @type {?} */ ((/** @type {?} */ (this.componentRef.instance))))).ngOnChanges);\n        this.initializeInputs();\n        this.initializeOutputs();\n        this.detectChanges();\n        /** @type {?} */\n        const applicationRef = this.injector.get(ApplicationRef);\n        applicationRef.attachView(this.componentRef.hostView);\n    }\n    /**\n     * Set any stored initial inputs on the component's properties.\n     * @protected\n     * @return {?}\n     */\n    initializeInputs() {\n        this.componentFactory.inputs.forEach((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ({ propName }) => {\n            if (this.initialInputValues.has(propName)) {\n                this.setInputValue(propName, this.initialInputValues.get(propName));\n            }\n            else {\n                // Keep track of inputs that were not initialized in case we need to know this for\n                // calling ngOnChanges with SimpleChanges\n                this.uninitializedInputs.add(propName);\n            }\n        }));\n        this.initialInputValues.clear();\n    }\n    /**\n     * Sets up listeners for the component's outputs so that the events stream emits the events.\n     * @protected\n     * @return {?}\n     */\n    initializeOutputs() {\n        /** @type {?} */\n        const eventEmitters = this.componentFactory.outputs.map((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ({ propName, templateName }) => {\n            /** @type {?} */\n            const emitter = (/** @type {?} */ (((/** @type {?} */ ((/** @type {?} */ (this.componentRef)).instance)))[propName]));\n            return emitter.pipe(map((/**\n             * @param {?} value\n             * @return {?}\n             */\n            (value) => ({ name: templateName, value }))));\n        }));\n        this.events = merge(...eventEmitters);\n    }\n    /**\n     * Calls ngOnChanges with all the inputs that have changed since the last call.\n     * @protected\n     * @return {?}\n     */\n    callNgOnChanges() {\n        if (!this.implementsOnChanges || this.inputChanges === null) {\n            return;\n        }\n        // Cache the changes and set inputChanges to null to capture any changes that might occur\n        // during ngOnChanges.\n        /** @type {?} */\n        const inputChanges = this.inputChanges;\n        this.inputChanges = null;\n        ((/** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ (this.componentRef)).instance))))).ngOnChanges(inputChanges);\n    }\n    /**\n     * Schedules change detection to run on the component.\n     * Ignores subsequent calls if already scheduled.\n     * @protected\n     * @return {?}\n     */\n    scheduleDetectChanges() {\n        if (this.scheduledChangeDetectionFn) {\n            return;\n        }\n        this.scheduledChangeDetectionFn = scheduler.scheduleBeforeRender((/**\n         * @return {?}\n         */\n        () => {\n            this.scheduledChangeDetectionFn = null;\n            this.detectChanges();\n        }));\n    }\n    /**\n     * Records input changes so that the component receives SimpleChanges in its onChanges function.\n     * @protected\n     * @param {?} property\n     * @param {?} currentValue\n     * @return {?}\n     */\n    recordInputChange(property, currentValue) {\n        // Do not record the change if the component does not implement `OnChanges`.\n        if (this.componentRef && !this.implementsOnChanges) {\n            return;\n        }\n        if (this.inputChanges === null) {\n            this.inputChanges = {};\n        }\n        // If there already is a change, modify the current value to match but leave the values for\n        // previousValue and isFirstChange.\n        /** @type {?} */\n        const pendingChange = this.inputChanges[property];\n        if (pendingChange) {\n            pendingChange.currentValue = currentValue;\n            return;\n        }\n        /** @type {?} */\n        const isFirstChange = this.uninitializedInputs.has(property);\n        this.uninitializedInputs.delete(property);\n        /** @type {?} */\n        const previousValue = isFirstChange ? undefined : this.getInputValue(property);\n        this.inputChanges[property] = new SimpleChange(previousValue, currentValue, isFirstChange);\n    }\n    /**\n     * Runs change detection on the component.\n     * @protected\n     * @return {?}\n     */\n    detectChanges() {\n        if (!this.componentRef) {\n            return;\n        }\n        this.callNgOnChanges();\n        (/** @type {?} */ (this.componentRef)).changeDetectorRef.detectChanges();\n    }\n}\nif (false) {\n    /**\n     * Merged stream of the component's output events.\n     * @type {?}\n     */\n    ComponentNgElementStrategy.prototype.events;\n    /**\n     * Reference to the component that was created on connect.\n     * @type {?}\n     * @private\n     */\n    ComponentNgElementStrategy.prototype.componentRef;\n    /**\n     * Changes that have been made to the component ref since the last time onChanges was called.\n     * @type {?}\n     * @private\n     */\n    ComponentNgElementStrategy.prototype.inputChanges;\n    /**\n     * Whether the created component implements the onChanges function.\n     * @type {?}\n     * @private\n     */\n    ComponentNgElementStrategy.prototype.implementsOnChanges;\n    /**\n     * Whether a change detection has been scheduled to run on the component.\n     * @type {?}\n     * @private\n     */\n    ComponentNgElementStrategy.prototype.scheduledChangeDetectionFn;\n    /**\n     * Callback function that when called will cancel a scheduled destruction on the component.\n     * @type {?}\n     * @private\n     */\n    ComponentNgElementStrategy.prototype.scheduledDestroyFn;\n    /**\n     * Initial input values that were set before the component was created.\n     * @type {?}\n     * @private\n     */\n    ComponentNgElementStrategy.prototype.initialInputValues;\n    /**\n     * Set of inputs that were not initially set when the component was created.\n     * @type {?}\n     * @private\n     */\n    ComponentNgElementStrategy.prototype.uninitializedInputs;\n    /**\n     * @type {?}\n     * @private\n     */\n    ComponentNgElementStrategy.prototype.componentFactory;\n    /**\n     * @type {?}\n     * @private\n     */\n    ComponentNgElementStrategy.prototype.injector;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Prototype for a class constructor based on an Angular component\n * that can be used for custom element registration. Implemented and returned\n * by the {\\@link createCustomElement createCustomElement() function}.\n *\n * \\@publicApi\n * @record\n * @template P\n */\nfunction NgElementConstructor() { }\nif (false) {\n    /**\n     * An array of observed attribute names for the custom element,\n     * derived by transforming input property names from the source component.\n     * @type {?}\n     */\n    NgElementConstructor.prototype.observedAttributes;\n    /* Skipping unhandled member: new (injector: Injector): NgElement&WithProperties<P>;*/\n}\n/**\n * Implements the functionality needed for a custom element.\n *\n * \\@publicApi\n * @abstract\n */\nclass NgElement extends HTMLElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * A subscription to change, connect, and disconnect events in the custom element.\n         */\n        this.ngElementEventsSubscription = null;\n    }\n}\nif (false) {\n    /**\n     * The strategy that controls how a component is transformed in a custom element.\n     * @type {?}\n     * @protected\n     */\n    NgElement.prototype.ngElementStrategy;\n    /**\n     * A subscription to change, connect, and disconnect events in the custom element.\n     * @type {?}\n     * @protected\n     */\n    NgElement.prototype.ngElementEventsSubscription;\n    /**\n     * Prototype for a handler that responds to a change in an observed attribute.\n     * @abstract\n     * @param {?} attrName The name of the attribute that has changed.\n     * @param {?} oldValue The previous value of the attribute.\n     * @param {?} newValue The new value of the attribute.\n     * @param {?=} namespace The namespace in which the attribute is defined.\n     * @return {?} Nothing.\n     */\n    NgElement.prototype.attributeChangedCallback = function (attrName, oldValue, newValue, namespace) { };\n    /**\n     * Prototype for a handler that responds to the insertion of the custom element in the DOM.\n     * @abstract\n     * @return {?} Nothing.\n     */\n    NgElement.prototype.connectedCallback = function () { };\n    /**\n     * Prototype for a handler that responds to the deletion of the custom element from the DOM.\n     * @abstract\n     * @return {?} Nothing.\n     */\n    NgElement.prototype.disconnectedCallback = function () { };\n}\n/**\n * A configuration that initializes an NgElementConstructor with the\n * dependencies and strategy it needs to transform a component into\n * a custom element class.\n *\n * \\@publicApi\n * @record\n */\nfunction NgElementConfig() { }\nif (false) {\n    /**\n     * The injector to use for retrieving the component's factory.\n     * @type {?}\n     */\n    NgElementConfig.prototype.injector;\n    /**\n     * An optional custom strategy factory to use instead of the default.\n     * The strategy controls how the transformation is performed.\n     * @type {?|undefined}\n     */\n    NgElementConfig.prototype.strategyFactory;\n}\n/**\n * \\@description Creates a custom element class based on an Angular component.\n *\n * Builds a class that encapsulates the functionality of the provided component and\n * uses the configuration information to provide more context to the class.\n * Takes the component factory's inputs and outputs to convert them to the proper\n * custom element API and add hooks to input changes.\n *\n * The configuration's injector is the initial injector set on the class,\n * and used by default for each created instance.This behavior can be overridden with the\n * static property to affect all newly created instances, or as a constructor argument for\n * one-off creations.\n *\n * \\@publicApi\n * @template P\n * @param {?} component The component to transform.\n * @param {?} config A configuration that provides initialization information to the created class.\n * @return {?} The custom-element construction class, which can be registered with\n * a browser's `CustomElementRegistry`.\n *\n */\nfunction createCustomElement(component, config) {\n    /** @type {?} */\n    const inputs = getComponentInputs(component, config.injector);\n    /** @type {?} */\n    const strategyFactory = config.strategyFactory || new ComponentNgElementStrategyFactory(component, config.injector);\n    /** @type {?} */\n    const attributeToPropertyInputs = getDefaultAttributeToPropertyInputs(inputs);\n    class NgElementImpl extends NgElement {\n        /**\n         * @param {?=} injector\n         */\n        constructor(injector) {\n            super();\n            // Note that some polyfills (e.g. document-register-element) do not call the constructor.\n            // Do not assume this strategy has been created.\n            // TODO(andrewseguin): Add e2e tests that cover cases where the constructor isn't called. For\n            // now this is tested using a Google internal test suite.\n            this.ngElementStrategy = strategyFactory.create(injector || config.injector);\n        }\n        /**\n         * @param {?} attrName\n         * @param {?} oldValue\n         * @param {?} newValue\n         * @param {?=} namespace\n         * @return {?}\n         */\n        attributeChangedCallback(attrName, oldValue, newValue, namespace) {\n            if (!this.ngElementStrategy) {\n                this.ngElementStrategy = strategyFactory.create(config.injector);\n            }\n            /** @type {?} */\n            const propName = (/** @type {?} */ (attributeToPropertyInputs[attrName]));\n            this.ngElementStrategy.setInputValue(propName, newValue);\n        }\n        /**\n         * @return {?}\n         */\n        connectedCallback() {\n            if (!this.ngElementStrategy) {\n                this.ngElementStrategy = strategyFactory.create(config.injector);\n            }\n            this.ngElementStrategy.connect(this);\n            // Listen for events from the strategy and dispatch them as custom events\n            this.ngElementEventsSubscription = this.ngElementStrategy.events.subscribe((/**\n             * @param {?} e\n             * @return {?}\n             */\n            e => {\n                /** @type {?} */\n                const customEvent = createCustomEvent((/** @type {?} */ (this.ownerDocument)), e.name, e.value);\n                this.dispatchEvent(customEvent);\n            }));\n        }\n        /**\n         * @return {?}\n         */\n        disconnectedCallback() {\n            if (this.ngElementStrategy) {\n                this.ngElementStrategy.disconnect();\n            }\n            if (this.ngElementEventsSubscription) {\n                this.ngElementEventsSubscription.unsubscribe();\n                this.ngElementEventsSubscription = null;\n            }\n        }\n    }\n    // Work around a bug in closure typed optimizations(b/79557487) where it is not honoring static\n    // field externs. So using quoted access to explicitly prevent renaming.\n    NgElementImpl['observedAttributes'] = Object.keys(attributeToPropertyInputs);\n    if (false) {\n        /* Skipping unnamed member:\n        static readonly['observedAttributes'] = Object.keys(attributeToPropertyInputs);*/\n    }\n    // Add getters and setters to the prototype for each property input. If the config does not\n    // contain property inputs, use all inputs by default.\n    inputs.map((/**\n     * @param {?} __0\n     * @return {?}\n     */\n    ({ propName }) => propName)).forEach((/**\n     * @param {?} property\n     * @return {?}\n     */\n    property => {\n        Object.defineProperty(NgElementImpl.prototype, property, {\n            get: (/**\n             * @return {?}\n             */\n            function () { return this.ngElementStrategy.getInputValue(property); }),\n            set: (/**\n             * @param {?} newValue\n             * @return {?}\n             */\n            function (newValue) { this.ngElementStrategy.setInputValue(property, newValue); }),\n            configurable: true,\n            enumerable: true,\n        });\n    }));\n    return (/** @type {?} */ (((/** @type {?} */ (NgElementImpl)))));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@publicApi\n * @type {?}\n */\nconst VERSION = new Version('8.2.14');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgElement, createCustomElement, VERSION };\n//# sourceMappingURL=elements.js.map\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LoginComponent } from './login.component';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: LoginComponent\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class LoginRoutingModule {}\n","<div class=\"login-page\" [@routerTransition]>\n  <div class=\"row justify-content-md-center\">\n    <div class=\"col-md-4\">\n      <img src=\"assets/images/logo.png\" width=\"150px\" class=\"user-avatar\" />\n      <h1>Catalogue Admin Panel</h1>\n      <form form [formGroup]=\"loginForm\" novalidate>\n        <div class=\"form-content\">\n          <div class=\"form-group\">\n            <input id=\"login\" type=\"text\" class=\"form-control input-underline input-lg\" name=\"login\" [(ngModel)]=\"login\" formControlName=\"login\" placeholder=\"{{ 'Login Name'}}\" required/>\n          </div>\n          <div class=\"alert alert-danger\"\n            *ngIf=\"loginForm.controls['login'].invalid && loginForm.controls['login'].touched\">\n            Login is required\n          </div>\n          <div class=\"form-group\">\n            <input type=\"password\" class=\"form-control input-underline input-lg\" id=\"password\" name=\"password\" placeholder=\"{{ 'Password'}}\" [(ngModel)]=\"password\" formControlName=\"password\" />\n          </div>\n          <div class=\"alert alert-danger\"\n            *ngIf=\"loginForm.controls['password'].invalid && loginForm.controls['password'].touched\">\n            Password is required\n          </div>\n        </div>\n        <div class=\"alert alert-danger\"\n        *ngIf=\"!isUserDataCorrect\">\n          login or password are incorrect\n      </div>\n        <button type=\"submit\" class=\"btn rounded-btn\" (click)=\"onLoggedin()\" [disabled]=\"loginForm.invalid\" >{{ 'Log in'}}</button>\n        &nbsp;\n        <button class=\"btn rounded-btn\" [routerLink]=\"['/signup']\">{{ 'Register'}}</button>\n      </form>\n\n      <!-- <form [formGroup]=\"loginForm\" novalidate>\n        <div class=\"bd-highlight d-flex card\" style=\"min-width: 400px;\">\n          <div class=\"mb-3 mt-4\" >\n            <div class=\"row no-gutters align-items-sm-start justify-content-center\">\n              <div class=\"col-md-5 mr-4\">\n                <div class=\"form-group\">\n                  <label>Login</label>\n                  <input class=\"form-control\" name=\"login\" formControlName=\"login\" placeholder=\"\" />\n                </div>\n                <div class=\"alert alert-danger\"\n                  *ngIf=\"loginForm.controls['login'].invalid && loginForm.controls['login'].touched\">\n                  Login doesn't specify!\n                </div>\n                <div class=\"form-group\">\n                  <label>Password</label>\n                  <input class=\"form-control\" name=\"password\" formControlName=\"password\" placeholder=\"\" />\n                </div>\n                <div class=\"alert alert-danger\"\n                  *ngIf=\"loginForm.controls['password'].invalid && loginForm.controls['password'].touched\">\n                  Password doesn't specify!\n                </div>\n\n              </div>\n            </div>\n            <div class=\"row no-gutters align-items-sm-start justify-content-start ml-5 mt-5\">\n              <div class=\"form-group\">\n                <button type=\"submit\" class=\"btn btn-primary mr-3\" [disabled]=\"loginForm.invalid\" (click)=\"changeSubmit()\">Save</button>\n                <button type=\"reset\" class=\"btn btn-secondary\">Cancel</button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n      </form> -->\n    </div>\n  </div>\n</div>\n","import { Component, OnInit, Injector } from '@angular/core';\nimport { createCustomElement } from '@angular/elements';\nimport { Router } from '@angular/router';\nimport { NgForm, FormGroup, FormControl, Validators } from '@angular/forms';\nimport { routerTransition } from '../router.animations';\nimport { UserDataService } from '../global-service/user-data.service';\nimport { User } from '../layout/interfaces';\nimport { Observable } from 'rxjs';\nimport { PopupService } from '../components/angular-element-component/popup.service';\nimport { PopupComponent } from '../components/angular-element-component/popup.component';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n  animations: [routerTransition()],\n})\nexport class LoginComponent implements OnInit {\n  login = '';\n  password = '';\n  isUserDataCorrect = true;\n  isPopupCreated = false;\n  isUserExit: Observable<any>;\n\n  loginForm: FormGroup = new FormGroup({\n    login: new FormControl('', Validators.required),\n    password: new FormControl('', Validators.required),\n  });\n\n  formData = new FormData();\n\n  constructor(\n    public router: Router,\n    private userService: UserDataService,\n    injector: Injector,\n    public popup: PopupService\n  ) {\n        // Convert `PopupComponent` to a custom element.\n        const PopupElement = createCustomElement(PopupComponent, {injector});\n        // Register the custom element with the browser.\n        customElements.define('popup-element', PopupElement);\n  }\n\n  ngOnInit() { }\n\n  onLoggedin() {\n    this.userService.onCheckUser(this.loginForm.value)\n    .subscribe(data => {\n      if (data.user) {\n        this.isUserDataCorrect = true;\n        const popup = document.querySelector('popup-element');\n        popup ? popup.remove() : null;\n        this.userService.setUsert({ name: this.login });\n        this.router.navigateByUrl(\"newslist\");\n      }\n    });\n    const popup = document.querySelector('popup-element');\n    popup ? popup.remove() : this.popup.showAsElement(`Your login, ${this.login} or password incorrect. Please try again`);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { LoginRoutingModule } from './login-routing.module';\nimport { LoginComponent } from './login.component';\nimport { ModalWindowModule } from '../components/modal-window/modal-window.module';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        LoginRoutingModule,\n        FormsModule,\n        ModalWindowModule,\n        ReactiveFormsModule,\n      ],\n    declarations: [LoginComponent],\n    exports: [],\n})\nexport class LoginModule {}\n"],"sourceRoot":"webpack:///","file":"login-login-module-ngfactory-es5.js"}